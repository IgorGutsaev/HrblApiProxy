//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace Filuet.Hrbl.Ordering.SDK
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class HrblRestApiClient
    {
        private string _baseUrl = "https://herbalife-oegdevws.hrbl.com";
        public System.Net.Http.HttpClient _httpClient;
        private System.Lazy<System.Text.Json.JsonSerializerOptions> _settings;

        public HrblRestApiClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings);
        }

        private System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <returns>Auto generated using Swagger Inspector</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> GetDistributorVolumePointsAsync(GetDistributorVolumePoints_body body)
        {
            return GetDistributorVolumePointsAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Auto generated using Swagger Inspector</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> GetDistributorVolumePointsAsync(GetDistributorVolumePoints_body body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/GetDistributorVolumePoints");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json; charset=utf-8"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Auto generated using Swagger Inspector</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<string> GetDSPostamatDetailsAsync(GetDSPostamatDetails_body body)
        {
            return GetDSPostamatDetailsAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Auto generated using Swagger Inspector</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<string> GetDSPostamatDetailsAsync(GetDSPostamatDetails_body body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/GetDSPostamatDetails");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json; charset=utf-8"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Auto generated using Swagger Inspector</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<string> GetSkuAvailabilityAsync(GetSkuAvailability_body body)
        {
            return GetSkuAvailabilityAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Auto generated using Swagger Inspector</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<string> GetSkuAvailabilityAsync(GetSkuAvailability_body body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/GetSkuAvailability");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json; charset=utf-8"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Auto generated using Swagger Inspector</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<string> GetShippingWhseAndFreightCodesAsync(GetShippingWhseAndFreightCodes_body body)
        {
            return GetShippingWhseAndFreightCodesAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Auto generated using Swagger Inspector</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<string> GetShippingWhseAndFreightCodesAsync(GetShippingWhseAndFreightCodes_body body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/GetShippingWhseAndFreightCodes");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json; charset=utf-8"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Auto generated using Swagger Inspector</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<string> SubmitOrderAsync(SubmitOrder_body body)
        {
            return SubmitOrderAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Auto generated using Swagger Inspector</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<string> SubmitOrderAsync(SubmitOrder_body body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/SubmitOrder");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json; charset=utf-8"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Auto generated using Swagger Inspector</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<string> HPSPaymentGatewayAsync(HPSPaymentGateway_body body)
        {
            return HPSPaymentGatewayAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Auto generated using Swagger Inspector</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<string> HPSPaymentGatewayAsync(HPSPaymentGateway_body body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/HPSPaymentGateway");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json; charset=utf-8"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Auto generated using Swagger Inspector</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<string> DsCashLimitAsync(DsCashLimit_body body)
        {
            return DsCashLimitAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Auto generated using Swagger Inspector</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<string> DsCashLimitAsync(DsCashLimit_body body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/DsCashLimit");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json; charset=utf-8"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Auto generated using Swagger Inspector</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<string> ValidateAsync(Api_validate_body body)
        {
            return ValidateAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Auto generated using Swagger Inspector</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<string> ValidateAsync(Api_validate_body body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/validate");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json; charset=utf-8"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Auto generated using Swagger Inspector</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<string> GetDistributorDiscountAsync(GetDistributorDiscount_body body)
        {
            return GetDistributorDiscountAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Auto generated using Swagger Inspector</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<string> GetDistributorDiscountAsync(GetDistributorDiscount_body body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/GetDistributorDiscount");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json; charset=utf-8"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Auto generated using Swagger Inspector</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<string> UpdateDsAddressContactsAsync(UpdateDsAddressContacts_body body)
        {
            return UpdateDsAddressContactsAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Auto generated using Swagger Inspector</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<string> UpdateDsAddressContactsAsync(UpdateDsAddressContacts_body body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/UpdateDsAddressContacts");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json; charset=utf-8"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Auto generated using Swagger Inspector</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<string> GetProductInventoryAsync(GetProductInventory_body body)
        {
            return GetProductInventoryAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Auto generated using Swagger Inspector</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<string> GetProductInventoryAsync(GetProductInventory_body body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/GetProductInventory");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json; charset=utf-8"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Auto generated using Swagger Inspector</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> GetDistributorTinsAsync(GetDistributorTins_body body)
        {
            return GetDistributorTinsAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Auto generated using Swagger Inspector</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> GetDistributorTinsAsync(GetDistributorTins_body body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/GetDistributorTins");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json; charset=utf-8"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Auto generated using Swagger Inspector</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<string> GetProductCatalogAsync(GetProductCatalog_body body)
        {
            return GetProductCatalogAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Auto generated using Swagger Inspector</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<string> GetProductCatalogAsync(GetProductCatalog_body body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/GetProductCatalog");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json; charset=utf-8"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Auto generated using Swagger Inspector</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<string> GetPriceDetailsAsync(GetPriceDetails_body body)
        {
            return GetPriceDetailsAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Auto generated using Swagger Inspector</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<string> GetPriceDetailsAsync(GetPriceDetails_body body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/GetPriceDetails");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json; charset=utf-8"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Auto generated using Swagger Inspector</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> DSFOPPurchasingLimitsAsync(DSFOPPurchasingLimits_body body)
        {
            return DSFOPPurchasingLimitsAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Auto generated using Swagger Inspector</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> DSFOPPurchasingLimitsAsync(DSFOPPurchasingLimits_body body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/DSFOPPurchasingLimits");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json; charset=utf-8"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Auto generated using Swagger Inspector</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> GetOrderDualMonthStatusAsync(GetOrderDualMonthStatus_body body)
        {
            return GetOrderDualMonthStatusAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Auto generated using Swagger Inspector</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> GetOrderDualMonthStatusAsync(GetOrderDualMonthStatus_body body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/GetOrderDualMonthStatus");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json; charset=utf-8"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Auto generated using Swagger Inspector</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> GetDistributorProfileAsync(GetDistributorProfile_body body)
        {
            return GetDistributorProfileAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Auto generated using Swagger Inspector</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> GetDistributorProfileAsync(GetDistributorProfile_body body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/GetDistributorProfile");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json; charset=utf-8"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Auto generated using Swagger Inspector</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<string> GetConversionRateAsync(GetConversionRate_body body)
        {
            return GetConversionRateAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Auto generated using Swagger Inspector</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<string> GetConversionRateAsync(GetConversionRate_body body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/GetConversionRate");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json; charset=utf-8"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool)
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[])value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class OrderHLOnlineOrderingts3SubmitOrder_OrderLine
    {

        [System.Text.Json.Serialization.JsonPropertyName("LinesTaxBreakup")]
        public OrderHLOnlineOrderingts3SubmitOrder_LinesTaxBreakup LinesTaxBreakup { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("StockingSKU")]
        public object StockingSKU { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ProductItemId")]
        public object ProductItemId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("PickLocator")]
        public object PickLocator { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("LogisticOtherCharge")]
        public object LogisticOtherCharge { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("UnitEarnBase")]
        public object UnitEarnBase { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("StatusFlag")]
        public object StatusFlag { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("LineStatus")]
        public object LineStatus { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("BackOrderedFlag")]
        public object BackOrderedFlag { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("LocalSkuDescription")]
        public object LocalSkuDescription { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TaxAmount")]
        public object TaxAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TotalDiscountAmount")]
        public object TotalDiscountAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("LineAmount")]
        public string LineAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("VolumePoints")]
        public object VolumePoints { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ProductType")]
        public string ProductType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("CalcWeight")]
        public object CalcWeight { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("CustomerDiscount")]
        public object CustomerDiscount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TaxBase")]
        public object TaxBase { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("NetPrice")]
        public object NetPrice { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("PHTaxAmount")]
        public object PHTaxAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ChrAttribute10")]
        public object ChrAttribute10 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TotalRetailPrice")]
        public string TotalRetailPrice { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("DateAttribute5")]
        public object DateAttribute5 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("DateAttribute4")]
        public object DateAttribute4 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("DateAttribute3")]
        public object DateAttribute3 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("DateAttribute2")]
        public object DateAttribute2 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("SkuDescription")]
        public object SkuDescription { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ChrAttribute8")]
        public object ChrAttribute8 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("DateAttribute1")]
        public object DateAttribute1 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ChrAttribute7")]
        public object ChrAttribute7 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ExternalOrderNumber")]
        public object ExternalOrderNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ChrAttribute9")]
        public object ChrAttribute9 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ChrAttribute4")]
        public object ChrAttribute4 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ChrAttribute3")]
        public object ChrAttribute3 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("EarnBase")]
        public string EarnBase { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ChrAttribute6")]
        public object ChrAttribute6 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ChrAttribute5")]
        public object ChrAttribute5 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("PHAmount")]
        public object PHAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("LineNumber")]
        public object LineNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TotalDiscountedPrice")]
        public string TotalDiscountedPrice { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ChrAttribute2")]
        public object ChrAttribute2 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ChrAttribute1")]
        public object ChrAttribute1 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("FreightTaxAmount")]
        public object FreightTaxAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("UnitVolume")]
        public string UnitVolume { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TaxRate")]
        public object TaxRate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("NumAttribute2")]
        public object NumAttribute2 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("NumAttribute3")]
        public object NumAttribute3 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("NumAttribute4")]
        public object NumAttribute4 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("NumAttribute5")]
        public object NumAttribute5 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("FreightAmount")]
        public object FreightAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("NumAttribute1")]
        public object NumAttribute1 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Quantity")]
        public string Quantity { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("CustomerPrice")]
        public object CustomerPrice { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("UOM")]
        public object UOM { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("UnitPrice")]
        public object UnitPrice { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ProductDescription")]
        public object ProductDescription { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("SKU")]
        public string SKU { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TotalLogisticCharge")]
        public object TotalLogisticCharge { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class GetProductInventory_body
    {

        [System.Text.Json.Serialization.JsonPropertyName("OrderType")]
        public string OrderType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("CountryCode")]
        public string CountryCode { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class OrderHLOnlineOrderingts3SubmitOrder_OrderHeaders_HeaderTaxBreakup
    {

        [System.Text.Json.Serialization.JsonPropertyName("TaxName")]
        public object TaxName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TaxValue")]
        public object TaxValue { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TaxRate")]
        public object TaxRate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("@nil")]
        public string Nil { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class GetOrderDualMonthStatus_body
    {

        [System.Text.Json.Serialization.JsonPropertyName("ShipToCountry")]
        public string ShipToCountry { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class OrderHLOnlineOrderingts3GetPriceDetails_OrderPriceHeader
    {

        [System.Text.Json.Serialization.JsonPropertyName("PriceDate")]
        public string PriceDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Warehouse")]
        public string Warehouse { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ProcessingLocation")]
        public string ProcessingLocation { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("FreightCode")]
        public string FreightCode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ManualFreight")]
        public string ManualFreight { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ExternalOrderNumber")]
        public string ExternalOrderNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("PostalCode")]
        public string PostalCode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("InvoicetoCode")]
        public string InvoicetoCode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("County")]
        public string County { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("CurrencyCode")]
        public string CurrencyCode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("OrderType")]
        public string OrderType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("IsFreightCodeOverride")]
        public string IsFreightCodeOverride { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("OrderMonth")]
        public string OrderMonth { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Address4")]
        public string Address4 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("OrderTypeId")]
        public string OrderTypeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("BadAddressFlag")]
        public string BadAddressFlag { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("CustomerName")]
        public string CustomerName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("AssigmentType")]
        public string AssigmentType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("CountryCode")]
        public string CountryCode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("DistributorId")]
        public string DistributorId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("PriceListHeaderId")]
        public string PriceListHeaderId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Address2")]
        public string Address2 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Address3")]
        public string Address3 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ShipFromOrgId")]
        public string ShipFromOrgId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("IsHAPOrder")]
        public string IsHAPOrder { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("UseSlidingScale")]
        public string UseSlidingScale { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Address1")]
        public string Address1 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("City")]
        public string City { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Province")]
        public string Province { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("OrderDate")]
        public string OrderDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ContributorClass")]
        public string ContributorClass { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("SalesChannelCode")]
        public string SalesChannelCode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("OrderSubType")]
        public string OrderSubType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("State")]
        public string State { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("QSId")]
        public string QSId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("OrderSource")]
        public string OrderSource { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("OrderCategory")]
        public string OrderCategory { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("SPId")]
        public string SPId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class GetDistributorDiscount_body
    {

        [System.Text.Json.Serialization.JsonPropertyName("DistributorId")]
        public string DistributorId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ShipToCountry")]
        public string ShipToCountry { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("OrderPurpose")]
        public string OrderPurpose { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("OrderMonth")]
        public string OrderMonth { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("VolumePoints")]
        public string VolumePoints { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("IDType")]
        public string IDType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ServiceConsumer")]
        public string ServiceConsumer { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class GetPriceDetails_body
    {

        [System.Text.Json.Serialization.JsonPropertyName("OrderPriceHeader")]
        public OrderHLOnlineOrderingts3GetPriceDetails_OrderPriceHeader OrderPriceHeader { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("OrderPriceLines")]
        public System.Collections.Generic.ICollection<OrderHLOnlineOrderingts3GetPriceDetails_OrderPriceLines> OrderPriceLines { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ServiceConsumer")]
        public string ServiceConsumer { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class GetDSPostamatDetails_body
    {

        [System.Text.Json.Serialization.JsonPropertyName("ZipCode")]
        public string ZipCode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Country")]
        public string Country { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Region")]
        public string Region { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("City")]
        public string City { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("PostamatType")]
        public string PostamatType { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class HPSPaymentGateway_body
    {

        [System.Text.Json.Serialization.JsonPropertyName("PaymentRequest")]
        public OrderHLOnlineOrderingts3HPSPaymentGateway_PaymentRequest PaymentRequest { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ServiceConsumer")]
        public string ServiceConsumer { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class GetProductCatalog_body
    {

        [System.Text.Json.Serialization.JsonPropertyName("OrderType")]
        public string OrderType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("CountryCode")]
        public string CountryCode { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class OrderHLOnlineOrderingts3GetSkuAvailability_Sku
    {

        [System.Text.Json.Serialization.JsonPropertyName("SkuName")]
        public string SkuName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Quantity")]
        public string Quantity { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("WarehouseCode")]
        public string WarehouseCode { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class OrderHLOnlineOrderingts3SubmitOrder_LinesTaxBreakup
    {

        [System.Text.Json.Serialization.JsonPropertyName("TaxName")]
        public object TaxName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TaxValue")]
        public object TaxValue { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TaxRate")]
        public object TaxRate { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class SubmitOrder_body
    {

        [System.Text.Json.Serialization.JsonPropertyName("OrderLine")]
        public System.Collections.Generic.ICollection<OrderHLOnlineOrderingts3SubmitOrder_OrderLine> OrderLine { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("OrderNotes")]
        public OrderHLOnlineOrderingts3SubmitOrder_OrderNotes OrderNotes { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("OrderHeaders")]
        public OrderHLOnlineOrderingts3SubmitOrder_OrderHeaders OrderHeaders { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("OrderAddress")]
        public OrderHLOnlineOrderingts3SubmitOrder_OrderAddress OrderAddress { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("OrderPayment")]
        public OrderHLOnlineOrderingts3SubmitOrder_OrderPayment OrderPayment { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("OrderPromotionLine")]
        public OrderHLOnlineOrderingts3SubmitOrder_OrderPromotionLine OrderPromotionLine { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ServiceConsumer")]
        public string ServiceConsumer { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class OrderHLOnlineOrderingts3SubmitOrder_OrderPromotionLine
    {

        [System.Text.Json.Serialization.JsonPropertyName("DateAttribute5")]
        public object DateAttribute5 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("DateAttribute4")]
        public object DateAttribute4 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("RedemptionType")]
        public object RedemptionType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("DateAttribute3")]
        public object DateAttribute3 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("DateAttribute2")]
        public object DateAttribute2 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ChrAttribute8")]
        public object ChrAttribute8 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("DateAttribute1")]
        public object DateAttribute1 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ChrAttribute7")]
        public object ChrAttribute7 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ChrAttribute9")]
        public object ChrAttribute9 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ChrAttribute4")]
        public object ChrAttribute4 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ChrAttribute3")]
        public object ChrAttribute3 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ChrAttribute6")]
        public object ChrAttribute6 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ChrAttribute5")]
        public object ChrAttribute5 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("PromotionItem")]
        public object PromotionItem { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("DateAttribute9")]
        public object DateAttribute9 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("DateAttribute8")]
        public object DateAttribute8 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ChrAttribute2")]
        public object ChrAttribute2 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("DateAttribute7")]
        public object DateAttribute7 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("@nil")]
        public string Nil { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ChrAttribute1")]
        public object ChrAttribute1 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("DateAttribute6")]
        public object DateAttribute6 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("NumAttribute6")]
        public object NumAttribute6 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("NumAttribute7")]
        public object NumAttribute7 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("RuleName")]
        public object RuleName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("NumAttribute8")]
        public object NumAttribute8 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("NumAttribute9")]
        public object NumAttribute9 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("NumAttribute2")]
        public object NumAttribute2 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("NumAttribute3")]
        public object NumAttribute3 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("NumAttribute4")]
        public object NumAttribute4 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("NumAttribute5")]
        public object NumAttribute5 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("RuleID")]
        public object RuleID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("PromotionCode")]
        public object PromotionCode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("NumAttribute1")]
        public object NumAttribute1 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Quantity")]
        public object Quantity { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("IsAddedToOrder")]
        public object IsAddedToOrder { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("DateAttribute10")]
        public object DateAttribute10 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("SKU")]
        public object SKU { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("NumAttribute10")]
        public object NumAttribute10 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ChrAttribute10")]
        public object ChrAttribute10 { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class UpdateDsAddressContacts_body
    {

        [System.Text.Json.Serialization.JsonPropertyName("DistributorId")]
        public string DistributorId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Address")]
        public OrderHLOnlineOrderingts3UpdateDsAddressContacts_Address Address { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("contact")]
        public OrderHLOnlineOrderingts3UpdateDsAddressContacts_contact Contact { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ServiceConsumer")]
        public string ServiceConsumer { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class OrderHLOnlineOrderingts3GetPriceDetails_OrderPriceLines
    {

        [System.Text.Json.Serialization.JsonPropertyName("CurrencyCode")]
        public string CurrencyCode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("PriceDate")]
        public string PriceDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("UOM")]
        public string UOM { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ProcessingLocation")]
        public string ProcessingLocation { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("PriceListHeaderId")]
        public string PriceListHeaderId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ExternalOrderNumber")]
        public string ExternalOrderNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("OrderedQtyUOM")]
        public string OrderedQtyUOM { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("SellingSKU")]
        public string SellingSKU { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("InventoryItemId")]
        public string InventoryItemId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ProductType")]
        public string ProductType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("OrderedQty")]
        public string OrderedQty { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("LineNumber")]
        public string LineNumber { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class GetDistributorVolumePoints_body
    {

        [System.Text.Json.Serialization.JsonPropertyName("DistributorId")]
        public string DistributorId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ToMonth")]
        public string ToMonth { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("FromMonth")]
        public string FromMonth { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ServiceConsumer")]
        public string ServiceConsumer { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("IncludeORgVolumes")]
        public string IncludeORgVolumes { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class OrderHLOnlineOrderingts3SubmitOrder_OrderPayment_CreditCard
    {

        [System.Text.Json.Serialization.JsonPropertyName("CardNumber")]
        public string CardNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("CardValidationType")]
        public string CardValidationType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TrxApprovalNumber")]
        public string TrxApprovalNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("CardType")]
        public string CardType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("CardHolderRelation")]
        public string CardHolderRelation { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("CardExpiryDate")]
        public string CardExpiryDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("CardTypeDescription")]
        public object CardTypeDescription { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("CardHolderName")]
        public string CardHolderName { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class DSFOPPurchasingLimits_body
    {

        [System.Text.Json.Serialization.JsonPropertyName("DistributorID")]
        public string DistributorID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("CountryCode")]
        public string CountryCode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ServiceConsumer")]
        public string ServiceConsumer { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class OrderHLOnlineOrderingts3UpdateDsAddressContacts_Address
    {

        [System.Text.Json.Serialization.JsonPropertyName("Building")]
        public object Building { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("CareOfName")]
        public object CareOfName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("SiteId")]
        public object SiteId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Attribute9")]
        public object Attribute9 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Attribute8")]
        public object Attribute8 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Attribute7")]
        public object Attribute7 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Attribute6")]
        public object Attribute6 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("IsActive")]
        public object IsActive { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Attribute5")]
        public object Attribute5 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Attribute4")]
        public object Attribute4 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Attribute3")]
        public object Attribute3 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Attribute2")]
        public object Attribute2 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Attribute1")]
        public object Attribute1 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("County")]
        public object County { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Reason")]
        public object Reason { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ZipPlusFour")]
        public object ZipPlusFour { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("geo_code")]
        public object Geo_code { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("FedexLocation")]
        public object FedexLocation { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ZipCode")]
        public string ZipCode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Attribute10")]
        public object Attribute10 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("City")]
        public string City { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Province")]
        public object Province { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("AddressLine3")]
        public object AddressLine3 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("AddressLine2")]
        public object AddressLine2 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("AddressLine1")]
        public string AddressLine1 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("State")]
        public object State { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("AddressLine4")]
        public object AddressLine4 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("IsPrimary")]
        public object IsPrimary { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("suburb")]
        public object Suburb { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Country")]
        public string Country { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("AddressType")]
        public string AddressType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("LastUpdateDate")]
        public object LastUpdateDate { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class OrderHLOnlineOrderingts3HPSPaymentGateway_PaymentRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("Operator")]
        public string Operator { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("DistributorId")]
        public string DistributorId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ExpiryDate")]
        public string ExpiryDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ProcessingLocation")]
        public string ProcessingLocation { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ClientRefNum")]
        public string ClientRefNum { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Amount")]
        public string Amount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("PostalCode")]
        public string PostalCode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("OrderNumber")]
        public string OrderNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Transactionclass")]
        public object Transactionclass { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Address1")]
        public string Address1 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("City")]
        public string City { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("CardHolderName")]
        public string CardHolderName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("CVV2")]
        public string CVV2 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("PayeeID")]
        public object PayeeID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ApplicationSource")]
        public string ApplicationSource { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("OrderType")]
        public string OrderType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("PayCode")]
        public string PayCode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Currency")]
        public string Currency { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Country")]
        public string Country { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("PaymentType")]
        public string PaymentType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("CreditCardNum")]
        public string CreditCardNum { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class DsCashLimit_body
    {

        [System.Text.Json.Serialization.JsonPropertyName("DistributorId")]
        public string DistributorId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ShipToCountry")]
        public string ShipToCountry { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("PaymentMethod")]
        public string PaymentMethod { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ServiceConsumer")]
        public string ServiceConsumer { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class GetShippingWhseAndFreightCodes_body
    {

        [System.Text.Json.Serialization.JsonPropertyName("PostalCode")]
        public string PostalCode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ExpressDeliveryFlag")]
        public string ExpressDeliveryFlag { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ServiceConsumer")]
        public string ServiceConsumer { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class OrderHLOnlineOrderingts3SubmitOrder_OrderNotes
    {

        [System.Text.Json.Serialization.JsonPropertyName("NumAttribute2")]
        public object NumAttribute2 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("DateAttribute5")]
        public object DateAttribute5 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("NumAttribute3")]
        public object NumAttribute3 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("DateAttribute4")]
        public object DateAttribute4 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("NumAttribute4")]
        public object NumAttribute4 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("DateAttribute3")]
        public object DateAttribute3 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("NumAttribute5")]
        public object NumAttribute5 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("DateAttribute2")]
        public object DateAttribute2 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ChrAttribute8")]
        public object ChrAttribute8 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("DateAttribute1")]
        public object DateAttribute1 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ChrAttribute7")]
        public object ChrAttribute7 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ExternalOrderNumber")]
        public object ExternalOrderNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ChrAttribute9")]
        public object ChrAttribute9 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("NumAttribute1")]
        public object NumAttribute1 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ChrAttribute4")]
        public object ChrAttribute4 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ChrAttribute3")]
        public object ChrAttribute3 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ChrAttribute6")]
        public object ChrAttribute6 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ChrAttribute5")]
        public object ChrAttribute5 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ChrAttribute2")]
        public object ChrAttribute2 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("NoteCode")]
        public object NoteCode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ChrAttribute1")]
        public object ChrAttribute1 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("NoteMessage")]
        public object NoteMessage { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ChrAttribute10")]
        public object ChrAttribute10 { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class OrderHLOnlineOrderingts3SubmitOrder_OrderAddress
    {

        [System.Text.Json.Serialization.JsonPropertyName("CsPhoneNumber")]
        public object CsPhoneNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ExternalOrderNumber")]
        public object ExternalOrderNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("PostalCode")]
        public object PostalCode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("County")]
        public object County { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("IDType")]
        public object IDType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("@nil")]
        public string Nil { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Address4")]
        public object Address4 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("BadAddressFlag")]
        public object BadAddressFlag { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ZipplusFour")]
        public object ZipplusFour { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ValidCsAddressFlag")]
        public object ValidCsAddressFlag { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("CustomerName")]
        public object CustomerName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("CsEmailValidFlag")]
        public object CsEmailValidFlag { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("CountryCode")]
        public object CountryCode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("AddressUid")]
        public object AddressUid { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("CsFirstName")]
        public object CsFirstName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("CsPhoneAreaCode")]
        public object CsPhoneAreaCode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("CsLastName")]
        public object CsLastName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ForeignAddressflag")]
        public object ForeignAddressflag { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("CsEMail")]
        public object CsEMail { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("CsPhoneValidFlag")]
        public object CsPhoneValidFlag { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Address2")]
        public object Address2 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Address3")]
        public object Address3 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("CsEmailUid")]
        public object CsEmailUid { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Address1")]
        public object Address1 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("City")]
        public object City { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("CsPhoneUid")]
        public object CsPhoneUid { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("State")]
        public object State { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("AddressType")]
        public object AddressType { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Api_validate_body
    {

        [System.Text.Json.Serialization.JsonPropertyName("X-HLAPPID")]
        public string XHLAPPID { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("AccessToken")]
        public string AccessToken { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class OrderHLOnlineOrderingts3UpdateDsAddressContacts_contact
    {

        [System.Text.Json.Serialization.JsonPropertyName("Type")]
        public string Type { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("SubType")]
        public string SubType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("OldValue")]
        public string OldValue { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("IsActive")]
        public string IsActive { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Attribute5")]
        public object Attribute5 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Attribute4")]
        public object Attribute4 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Value")]
        public string Value { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("IsPrimary")]
        public string IsPrimary { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Attribute3")]
        public object Attribute3 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Attribute2")]
        public object Attribute2 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Attribute1")]
        public object Attribute1 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("LastUpdateDate")]
        public object LastUpdateDate { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class OrderHLOnlineOrderingts3SubmitOrder_OrderHeaders
    {

        [System.Text.Json.Serialization.JsonPropertyName("TotalDue")]
        public string TotalDue { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("AppsRespId")]
        public object AppsRespId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("CustomerTax")]
        public object CustomerTax { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ReceiptSource")]
        public object ReceiptSource { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ShippingInstructions")]
        public string ShippingInstructions { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("DsLastName")]
        public object DsLastName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("StatusFlag")]
        public object StatusFlag { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("PickupName")]
        public object PickupName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("LogisticsCharges")]
        public object LogisticsCharges { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TaxAmount")]
        public string TaxAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("HoldName")]
        public object HoldName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("OrderMonth")]
        public string OrderMonth { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("FreightCharges")]
        public object FreightCharges { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("CampaignNumber")]
        public object CampaignNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("WaldoStore")]
        public object WaldoStore { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("PartySiteId")]
        public object PartySiteId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("CurrentSubType")]
        public object CurrentSubType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("FQSId")]
        public object FQSId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("BusinessName")]
        public object BusinessName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("DropShipFlag")]
        public object DropShipFlag { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ValidCsPhoneFlag")]
        public object ValidCsPhoneFlag { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("CustomerId")]
        public object CustomerId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("UseSlidingScale")]
        public object UseSlidingScale { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("DiscountAmount")]
        public string DiscountAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ShippingMethodCode")]
        public string ShippingMethodCode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("SalesChannelCode")]
        public string SalesChannelCode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("PricingDate")]
        public string PricingDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("PriceListId")]
        public object PriceListId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TotalVolume")]
        public string TotalVolume { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("PHTaxAmount")]
        public object PHTaxAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("OtherType")]
        public object OtherType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("SponserId")]
        public object SponserId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("OrderConfirmEmail")]
        public string OrderConfirmEmail { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("OrderTypeId")]
        public string OrderTypeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("OrderTypeCode")]
        public string OrderTypeCode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("CustFaceDSEmail")]
        public object CustFaceDSEmail { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("CSTotalPaidAmount")]
        public object CSTotalPaidAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("FreightCarrierCode")]
        public object FreightCarrierCode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ForeignAddressFlag")]
        public object ForeignAddressFlag { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ShipmentPriorityCode")]
        public object ShipmentPriorityCode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("OrderShippingCharges")]
        public object OrderShippingCharges { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("FreightTaxAmount")]
        public object FreightTaxAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TinNumber")]
        public object TinNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("CancelledFlag")]
        public object CancelledFlag { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("NumAttribute6")]
        public object NumAttribute6 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("CsDiscountAmount")]
        public object CsDiscountAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("NumAttribute7")]
        public object NumAttribute7 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("CsDsSubType")]
        public object CsDsSubType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("NumAttribute8")]
        public object NumAttribute8 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("NumAttribute9")]
        public object NumAttribute9 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("NumAttribute2")]
        public object NumAttribute2 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("NumAttribute3")]
        public object NumAttribute3 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("NumAttribute4")]
        public object NumAttribute4 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ValidCsEmailFlag")]
        public object ValidCsEmailFlag { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("NumAttribute5")]
        public object NumAttribute5 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("NumAttribute1")]
        public object NumAttribute1 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("WillCallFlag")]
        public string WillCallFlag { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("AppsUserId")]
        public object AppsUserId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("CsDsPhoneNumber")]
        public object CsDsPhoneNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("OrgId")]
        public string OrgId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("HoldId")]
        public object HoldId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("CustomerOrderNumber")]
        public object CustomerOrderNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Temp50Flag")]
        public object Temp50Flag { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("CurrentType")]
        public object CurrentType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("CsDsId")]
        public object CsDsId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("DsFirstName")]
        public object DsFirstName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("WalkInOrderFlag")]
        public object WalkInOrderFlag { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("AssignmentType")]
        public object AssignmentType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("CombinedOrderVolume")]
        public object CombinedOrderVolume { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ContactReference")]
        public object ContactReference { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("DSName")]
        public object DSName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("DsPhoneAreaCode")]
        public object DsPhoneAreaCode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("NumAttribute10")]
        public object NumAttribute10 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("DSPhone")]
        public object DSPhone { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ReceiptDate")]
        public object ReceiptDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("BookedFlag")]
        public object BookedFlag { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Locale")]
        public object Locale { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("FreightOverRideFlag")]
        public object FreightOverRideFlag { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("CountryOfMailing")]
        public object CountryOfMailing { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("DSEmail")]
        public object DSEmail { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ProcessingLocation")]
        public string ProcessingLocation { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("AmountPaid")]
        public object AmountPaid { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("PBId")]
        public object PBId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ProfitFlag")]
        public object ProfitFlag { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("SMSRole")]
        public object SMSRole { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("CsDsPhoneAreaCode")]
        public object CsDsPhoneAreaCode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("CustFaceDSFname")]
        public object CustFaceDSFname { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ProfitAmount")]
        public object ProfitAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ValidCsAddressFlag")]
        public object ValidCsAddressFlag { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("CustomerSubTotal")]
        public object CustomerSubTotal { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("CustFaceDSPhone")]
        public object CustFaceDSPhone { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("CsPhoneAreaCode")]
        public object CsPhoneAreaCode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ReceiptNumber")]
        public object ReceiptNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ChrAttribute15")]
        public object ChrAttribute15 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("DistributorId")]
        public string DistributorId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ChrAttribute14")]
        public object ChrAttribute14 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("CsDiscountPercent")]
        public object CsDiscountPercent { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("DualOrderNumber")]
        public object DualOrderNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ChrAttribute13")]
        public object ChrAttribute13 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ChrAttribute12")]
        public object ChrAttribute12 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("OrderPurpose")]
        public object OrderPurpose { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("DistributorLocationId")]
        public object DistributorLocationId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("OrderImportMode")]
        public object OrderImportMode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ReferenceNumber")]
        public object ReferenceNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("CustomerShipping")]
        public object CustomerShipping { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("City")]
        public string City { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("CsDsValidatedFlag")]
        public object CsDsValidatedFlag { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Province")]
        public object Province { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("CustomerTotalDue")]
        public object CustomerTotalDue { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("SMSNumber")]
        public string SMSNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("SlidingDiscount")]
        public string SlidingDiscount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("State")]
        public object State { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("PaymentMethod")]
        public object PaymentMethod { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("OrderSource")]
        public string OrderSource { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ChrAttribute11")]
        public object ChrAttribute11 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TotalAmountPaid")]
        public string TotalAmountPaid { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Balance")]
        public string Balance { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ChrAttribute10")]
        public object ChrAttribute10 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TotalRetailPrice")]
        public string TotalRetailPrice { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("WareHouseCode")]
        public string WareHouseCode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("DateAttribute5")]
        public object DateAttribute5 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("DateAttribute4")]
        public object DateAttribute4 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("DateAttribute3")]
        public object DateAttribute3 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("PrimaryFlag")]
        public object PrimaryFlag { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("CustFaceDSLname")]
        public object CustFaceDSLname { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("DateAttribute2")]
        public object DateAttribute2 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("IsHapFlag")]
        public object IsHapFlag { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ChrAttribute8")]
        public object ChrAttribute8 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("DateAttribute1")]
        public object DateAttribute1 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ChrAttribute7")]
        public object ChrAttribute7 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ExternalOrderNumber")]
        public object ExternalOrderNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ChrAttribute9")]
        public object ChrAttribute9 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ChrAttribute4")]
        public object ChrAttribute4 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("BaseTotalOnlinePrice")]
        public object BaseTotalOnlinePrice { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("PostalCode")]
        public string PostalCode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ChrAttribute3")]
        public string ChrAttribute3 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ChrAttribute6")]
        public string ChrAttribute6 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ChrAttribute5")]
        public object ChrAttribute5 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("County")]
        public object County { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ChrAttribute2")]
        public object ChrAttribute2 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ReceiptChannel")]
        public object ReceiptChannel { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("HeaderTaxBreakup")]
        public System.Collections.Generic.ICollection<OrderHLOnlineOrderingts3SubmitOrder_OrderHeaders_HeaderTaxBreakup> HeaderTaxBreakup { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ChrAttribute1")]
        public object ChrAttribute1 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("PaymentMethodDescription")]
        public object PaymentMethodDescription { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("OrderPaymentStatus")]
        public string OrderPaymentStatus { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Address4")]
        public object Address4 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Phone")]
        public object Phone { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("BadAddressFlag")]
        public object BadAddressFlag { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("PHCharges")]
        public object PHCharges { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("CustomerName")]
        public string CustomerName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("CountryCode")]
        public string CountryCode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Notes")]
        public object Notes { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TinCode")]
        public object TinCode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("DiscountRetailPrice")]
        public object DiscountRetailPrice { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("CombinedOrderQty")]
        public object CombinedOrderQty { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Address2")]
        public string Address2 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Address3")]
        public string Address3 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("CsDsEmail")]
        public object CsDsEmail { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("InvShipFlag")]
        public string InvShipFlag { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Address1")]
        public string Address1 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("SMSAction")]
        public object SMSAction { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("OtherSubType")]
        public object OtherSubType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("CsDsFirstName")]
        public object CsDsFirstName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("OrderDate")]
        public string OrderDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("PersonalInstructions")]
        public object PersonalInstructions { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ContributorClass")]
        public object ContributorClass { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("OrderSubType")]
        public object OrderSubType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TaxBreakupId")]
        public object TaxBreakupId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("CsDsLastName")]
        public object CsDsLastName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("CsDsType")]
        public object CsDsType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("OrderDiscount")]
        public string OrderDiscount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("OrderFreightCharges")]
        public object OrderFreightCharges { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("QSId")]
        public object QSId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("OtherCharges")]
        public object OtherCharges { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("CustAccountId")]
        public object CustAccountId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class GetDistributorProfile_body
    {

        [System.Text.Json.Serialization.JsonPropertyName("DistributorId")]
        public string DistributorId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ServiceConsumer")]
        public string ServiceConsumer { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class OrderHLOnlineOrderingts3SubmitOrder_OrderPayment
    {

        [System.Text.Json.Serialization.JsonPropertyName("PaymentMethodId")]
        public object PaymentMethodId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ClientRefNumber")]
        public string ClientRefNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("VoidFlag")]
        public string VoidFlag { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("PaymentAmount")]
        public string PaymentAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("StatusFlag")]
        public object StatusFlag { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Name")]
        public object Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("CurrencyCode")]
        public string CurrencyCode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Remarks")]
        public object Remarks { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TransactionCode")]
        public object TransactionCode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("PaymentOption")]
        public object PaymentOption { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("EconComm")]
        public object EconComm { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("PaymentStatus")]
        public string PaymentStatus { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("AppliedDate")]
        public string AppliedDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("EconAmount")]
        public object EconAmount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("PaymentDate")]
        public string PaymentDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Paycode")]
        public string Paycode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("PayeeId")]
        public object PayeeId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("BankAccountId")]
        public object BankAccountId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("AuthorizationType")]
        public string AuthorizationType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ChrAttribute10")]
        public object ChrAttribute10 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("BankAccountNumber")]
        public object BankAccountNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("SponserId")]
        public object SponserId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("EconInfo")]
        public object EconInfo { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("DateAttribute5")]
        public object DateAttribute5 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("DateAttribute4")]
        public object DateAttribute4 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("DateAttribute3")]
        public object DateAttribute3 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("DateAttribute2")]
        public object DateAttribute2 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ChrAttribute8")]
        public object ChrAttribute8 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("DateAttribute1")]
        public object DateAttribute1 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ChrAttribute7")]
        public object ChrAttribute7 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ExternalOrderNumber")]
        public object ExternalOrderNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ChrAttribute9")]
        public object ChrAttribute9 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ChrAttribute4")]
        public object ChrAttribute4 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ChrAttribute3")]
        public object ChrAttribute3 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ApprovalNumber")]
        public string ApprovalNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("APFPaidFlag")]
        public object APFPaidFlag { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("SecondBonus")]
        public object SecondBonus { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ChrAttribute6")]
        public object ChrAttribute6 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("PostAuthCode")]
        public object PostAuthCode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ChrAttribute5")]
        public object ChrAttribute5 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("FirstBonus")]
        public object FirstBonus { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ChrAttribute2")]
        public object ChrAttribute2 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("PaymentMethodName")]
        public string PaymentMethodName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ChrAttribute1")]
        public object ChrAttribute1 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("CheckWireNumber")]
        public object CheckWireNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("PaymentType")]
        public string PaymentType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("NumAttribute2")]
        public object NumAttribute2 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("Installments")]
        public object Installments { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("NumAttribute3")]
        public object NumAttribute3 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("NumAttribute4")]
        public object NumAttribute4 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("NumAttribute5")]
        public object NumAttribute5 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("NumAttribute1")]
        public object NumAttribute1 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("EconStatus")]
        public object EconStatus { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("BeginMonth")]
        public object BeginMonth { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("CreditCard")]
        public OrderHLOnlineOrderingts3SubmitOrder_OrderPayment_CreditCard CreditCard { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("TransactionTime")]
        public object TransactionTime { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ConversionRate")]
        public object ConversionRate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("DocSeqNumber")]
        public object DocSeqNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("PaymentReceived")]
        public string PaymentReceived { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class GetSkuAvailability_body
    {

        [System.Text.Json.Serialization.JsonPropertyName("SkuInquiryDetails")]
        public System.Collections.Generic.ICollection<OrderHLOnlineOrderingts3GetSkuAvailability_SkuInquiryDetails> SkuInquiryDetails { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ServiceConsumer")]
        public string ServiceConsumer { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class OrderHLOnlineOrderingts3GetSkuAvailability_SkuInquiryDetails
    {

        [System.Text.Json.Serialization.JsonPropertyName("Sku")]
        public OrderHLOnlineOrderingts3GetSkuAvailability_Sku Sku { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class GetConversionRate_body
    {

        [System.Text.Json.Serialization.JsonPropertyName("FromCurrency")]
        public string FromCurrency { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ToCurrency")]
        public string ToCurrency { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ConversionDate")]
        public string ConversionDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ExchangeRateType")]
        public string ExchangeRateType { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class GetDistributorTins_body
    {

        [System.Text.Json.Serialization.JsonPropertyName("ServiceConsumer")]
        public string ServiceConsumer { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("DistributorId")]
        public string DistributorId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("CountryCode")]
        public string CountryCode { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore 472
#pragma warning restore 114
#pragma warning restore 108
#pragma warning restore 3016
#pragma warning restore 8603
