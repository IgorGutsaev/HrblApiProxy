@model List<Filuet.Hrbl.Ordering.Abstractions.Models.Promotion>
@using Filuet.Hrbl.Ordering.Abstractions.Enums
@using Filuet.Hrbl.Ordering.Abstractions.Models
@using Filuet.Hrbl.Ordering.Common;
@using Filuet.Hrbl.Ordering.POC.PromoEngine;

<style>
    .promoFoundPopup {
        border: 1px solid #0094ff;
        background-color: #dbf2ff;
        text-align: left;
        margin: auto;
        margin-top: 10px !important;
        width: 400px;
        padding: 5px;
    }

    #toast-container > .toast {
        max-width: 600px;
        width: 99%;
    }

    .receipt {
        background-color: #fff2de;
        max-width: 400px;
        border: 1px solid #fcc578;
        margin: auto;
        padding: 10px;
    }
</style>

<script type="text/javascript">
    function codeAddress() {
        var errorsUnresolved = 0;
        if ('@(Model.First().State == Filuet.Hrbl.Ordering.Abstractions.Models.PromotionsState.Verification)' === 'True') {

            // If some promotions are selected and no mandatory promotions that hanen't been chosen
            @if (Model.Any(x => x.Rewards.Any(r => r.IsSelected)) && !Model.Any(x=>x.VerificationInfo.HasValue && x.VerificationInfo.Value.Item1 == ActionLevel.Error))
            {
                <text>
                    toastr.success('The selected promotions have been applied to your order');
                </text>
            }

            @foreach (var promo in Model)
            {
                if (promo.VerificationInfo.HasValue)
                {
                    if (promo.VerificationInfo.Value.Item1 == ActionLevel.Error)
                    {
                        <text>
                            errorsUnresolved = 1;
                            toastr.error('@promo.VerificationInfo.Value.Item2');
                        </text>
                    }
                    else if (promo.VerificationInfo.Value.Item1 == ActionLevel.Warning)
                    {
                        <text>
                            toastr.warning('@promo.VerificationInfo.Value.Item2');
                        </text>
                    }
                }
            }

            if (errorsUnresolved === 1)
                document.getElementById("openPromotions").click();
        }
        else if ('@(Model.First().State == Filuet.Hrbl.Ordering.Abstractions.Models.PromotionsState.Selection)' === 'True') {
            @foreach (var promo in Model)
            {
                if (promo.WelcomeInfo.HasValue)
                {
                    <text>
                        toastr.info('@promo.WelcomeInfo.Value.Item2');
                    </text>
                }
            }
        }
    }

    window.onload = codeAddress;

    function onSingleHasChanged(uid, redemptionType, element) {
        $('#releaseButton_' + uid).removeClass('btn-warning');
        $('#releaseButton_' + uid).removeClass('btn-secondary');
        $('#releaseButton_' + uid).addClass('btn-secondary');

        if (redemptionType === 2 && element.checked) // Optional
        {
            // make reset button active
            $('#releaseButton_' + uid).removeClass('btn-secondary');
            $('#releaseButton_' + uid).addClass('btn-warning');
        }

        $('#saveButton_' + uid).removeClass('disabled');
        UnsavedChangesDetected();
    }

    function applySelection(uid) {
        $('#saveButton_' + uid).removeClass('disabled');
        $('#saveButton_' + uid).addClass('disabled');

        var allSaved = true;

        $('[id^="saveButton_"]').each(function () {
            if (!$(this).hasClass("disabled")) { // if at least one unsaved promotion exisits
                UnsavedChangesDetected();
                allSaved = false;
            }
        });

        if (allSaved)
            AllowSubmit();
    }

    function releaseSelection(uid) { // reset radiobox
        $("input:radio[uid=choise_" + uid + "]:checked").prop('checked', false);
        $("input:checkbox[uid=choise_" + uid + "]:checked").prop('checked', false);

        // make reset button inactive
        $('#releaseButton_' + uid).removeClass('btn-warning');
        $('#releaseButton_' + uid).addClass('btn-secondary');

        // activate save button
        $('#saveButton_' + uid).removeClass('disabled');
        UnsavedChangesDetected();
    }

    function onMultiplyHasChanged(new_value, uid, qtyToRedeem, redemptionType, redemptionLimit) {
        qty = 0;

        if (redemptionType === 2 && redemptionLimit === 3) {
            $("input:checkbox[uid=choise_" + uid + "]").prop("checked", new_value);
        }
        else {
            $("input:checkbox[uid=choise_" + uid + "]:checked").each(function () {
                qty += 1;
            });
        }

        //alert(qty + '/' + qtyToRedeem);

        if (qty === qtyToRedeem || (qty == 0 && redemptionType === 2)) {
            $('#saveButton_' + uid).removeClass('disabled');
            UnsavedChangesDetected();
        }
        else $('#saveButton_' + uid).addClass('disabled');
    }

    function UnsavedChangesDetected() {
        $('#lockButton').show();
        $('#confirmButton').hide();
    }

    function AllowSubmit() {
        $('#lockButton').hide();
        $('#confirmButton').show();
    }

    var detailsAreShown = 0;

    function showDetails() {
        if (detailsAreShown === 0) {
            $('#promoGroupView').show();
            detailsAreShown = 1;
            document.getElementById('detailsButton').textContent = "Hide details";
        }
        else {
            $('#promoGroupView').hide();
            detailsAreShown = 0;
            document.getElementById('detailsButton').textContent  = "Show details";
        }
    }
</script>

@{
    <div class="promoFoundPopup">
        <b>Congratulations!</b><br>
        Gifts for <b>@Model.Count() promotion@(@Model.Count() == 1 ? string.Empty : "s")</b> are available to you.<br>
        Select gifts to add to your order.
        <br>
        <br>

        <div align="right">
            <button type="button" id="openPromotions" class="btn btn-primary" data-toggle="modal" data-target="#exampleModal">
                Promotions
            </button>
        </div>

        <form method="post" action="/Home/Index">
            <!-- Modal -->
            <div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-lg" role="document">
                    <div class="modal-content form-group">
                        <div class="modal-header">
                            <h5 class="modal-title" id="exampleModalLabel">Manage Vouchers & Promotions</h5>

                            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                        <div class="modal-body">
                            <p>
                                <h6>Select the discount and/or promotions and add them to you order</h6>
                                <mark style="border: 1px solid #ffd162"><small>Some items are not available for some promotions if previously selected</small></mark>
                            </p>

                            <div id="carouselExampleControls" class="carousel" @*data-ride="carousel slide"*@ style="background-color: darkgray">
                                <ol class="carousel-indicators">
                                    @for (int i = 0; i < Model.Count(); i++)
                                    {
                                        <li data-target="#carouselExampleIndicators" data-slide-to="@i" class="@(i == 0 ? "active" : string.Empty)"></li>
                                    }
                                </ol>
                                <div class="carousel-inner">

                                    @for (int i = 0; i < Model.Count(); i++)
                                    {
                                        bool disableChooser = Model[i].RedemptionLimit == PromotionRedemptionLimit.All && Model[i].RedemptionType == PromotionRedemptionType.Automatic;

                                        <div class="carousel-item text-center @(Model[i] == Model.First() ? "active" : string.Empty)" style="padding: 10px 70px 150px 70px">
                                            <p class="h6">@Model[i].Notification</p>

                                            @Html.HiddenFor(x => x[i].TestId)
                                            @Html.HiddenFor(x => x[i].State)
                                            @Html.HiddenFor(x => x[i].RuleId)
                                            @Html.HiddenFor(x => x[i].RedemptionLimit)
                                            @Html.HiddenFor(x => x[i].RedemptionType)
                                            @Html.HiddenFor(x => x[i].RuleName)
                                            @Html.HiddenFor(x => x[i].Notification)

                                            @switch (Model[i].RedemptionLimit)
                                            {
                                                case PromotionRedemptionLimit.One:
                                                    switch (Model[i].RedemptionType)
                                                    {
                                                        case PromotionRedemptionType.Automatic: // 4.1.1 / 4.4.1
                                                        case PromotionRedemptionType.Optional: // 4.1.4 / 4.4.4
                                                            var htmlAttributes = new { uid = $"choise_{Model[i].RuleId}", onchange = $"onSingleHasChanged('{Model[i].RuleId}', {(int)Model[i].RedemptionType}, this);" };

                                                            if (Model[i].Rewards.Count() > 1) // If skus, skus + CV: // 4.1.1 / 4.1.4 / 4.4.1 / 4.4.4
                                                            {
                                                                @for (int j = 0; j < Model[i].Rewards.Count(); j++)
                                                                {
                                                                    @Html.HiddenFor(x => x[i].Rewards[j].RewardItem)
                                                                    @Html.HiddenFor(x => x[i].Rewards[j].Description)
                                                                    @Html.HiddenFor(x => x[i].Rewards[j].Type)
                                                                    @Html.RadioButtonFor(model => model[i].SelectedReward, Model[i].Rewards[j], htmlAttributes) <span /> @Model[i].Rewards[j] <br />
                                                                }
                                                            }
                                                            else // single CV: 4.2.1 / 4.2.2
                                                            {
                                                                @Html.HiddenFor(x => x[i].Rewards[0].RewardItem)
                                                                @Html.EditorFor(model => model[i].Rewards[0].IsSelected, new { htmlAttributes = htmlAttributes }) <span /> @Model[i].Rewards[0]
                                                            }
                                                            break;
                                                        default:
                                                            break;
                                                    }
                                                    break;
                                                case PromotionRedemptionLimit.Multiple:
                                                case PromotionRedemptionLimit.All:
                                                    switch (Model[i].RedemptionType)
                                                    {
                                                        case PromotionRedemptionType.Automatic: // 4.1.2 / 4.4.2
                                                        case PromotionRedemptionType.Optional: // 4.1.5 / 4.4.5

                                                            @for (int j = 0; j < Model[i].Rewards.Count(); j++)
                                                            {
                                                                @Html.HiddenFor(x => x[i].Rewards[j].RewardItem)
                                                                @Html.HiddenFor(x => x[i].Rewards[j].Description)
                                                                @Html.HiddenFor(x => x[i].Rewards[j].Type)

                                                                if (!disableChooser)
                                                                {
                                                                    @Html.CheckBoxFor(model => model[i].Rewards[j].IsSelected, new { uid = $"choise_{Model[i].RuleId}", onchange = $"onMultiplyHasChanged(this.checked, '{Model[i].RuleId}', {Model[i].MaxQtyToRedeem}, {(int)Model[i].RedemptionType}, {(int)Model[i].RedemptionLimit});" })
                                                                }
                                                                else
                                                                {
                                                                    @Html.HiddenFor(x => x[i].Rewards[j].IsSelected)
                                                                    @Html.CheckBoxFor(model => model[i].Rewards[j].IsSelected, new { disabled = true, uid = $"choise_{Model[i].RuleId}", onchange = $"onMultiplyHasChanged(this.checked,'{Model[i].RuleId}', {Model[i].MaxQtyToRedeem}, {(int)Model[i].RedemptionType}, {(int)Model[i].RedemptionLimit});" })
                                                                }

                                                                <span /> @Model[i].Rewards[j] <br />
                                                            }

                                                            break;
                                                        default:
                                                            break;
                                                    }
                                                    break;
                                                default:
                                                    break;
                                            }

                                            @if (!disableChooser)
                                            {
                                                <br />
                                                <br />

                                                <div style="text-align: center">
                                                    @if (Model[i].RedemptionLimit == PromotionRedemptionLimit.One && Model[i].RedemptionType == PromotionRedemptionType.Optional)
                                                    {
                                                        <input type="button" id="releaseButton_@Model[i].RuleId" class="btn btn-secondary" onclick="releaseSelection('@Model[i].RuleId')" value="Deselect" />
                                                    }
                                                    <button type="button" id="saveButton_@Model[i].RuleId" class="btn btn-primary disabled" onclick="applySelection('@Model[i].RuleId')">Save selection</button>
                                                </div>

                                            }
                                            <br />
                                            <div class="carousel-caption d-none d-md-block">
                                                <p>@(Model[i].RuleId + ": " + Model[i].RuleName)</p>
                                                <p style="font-size: 12px; color: black">[@Model[i].Type / @Model[i].RedemptionLimit.GetDescription() / @Model[i].RedemptionType.GetDescription()]</p>
                                            </div>
                                        </div>
                                    }

                                </div>
                                <a class="carousel-control-prev w-auto" href="#carouselExampleControls" role="button" data-slide="prev">
                                    <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                                    <span class="sr-only">Previous</span>
                                </a>
                                <a class="carousel-control-next w-auto" href="#carouselExampleControls" role="button" data-slide="next">
                                    <span class="carousel-control-next-icon" aria-hidden="true"></span>
                                    <span class="sr-only">Next</span>
                                </a>
                            </div>


                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                            <button type="submit" id="confirmButton" class="btn btn-primary">Next</button>
                            <button type="button" id="lockButton" class="btn btn-secondary" style="display: none" onclick="toastr.warning('There are some unsaved changes')">Next</button>
                        </div>
                    </div>
                </div>
            </div>
        </form>
    </div>

    @if (Model.First().State == PromotionsState.Selection)
    {
        <br />
        <div class="text-center">
            <button id="detailsButton" type="button" class="btn btn-outline-secondary center-block" onclick="showDetails()">Show details</button>
        </div>
        <br />
        @Html.Partial("~/Views/Home/_PromoViewGrouped.cshtml", Model)
    }
    else if (Model.First().State == PromotionsState.Verification &&
        Model.Any(x => x.Rewards.Any(r => r.IsSelected)) &&
        !Model.Any(x => x.VerificationInfo.HasValue && x.VerificationInfo.Value.Item1 == ActionLevel.Error))
    {

        // If some free SKUs were selected or If some CV were selected
        if (Model.Any(x => x.Rewards.Any(r => r.Type.Equals("FREE SKU", StringComparison.InvariantCultureIgnoreCase) && r.IsSelected))
             || Model.Any(x => x.Rewards.Any(r => r.Type.Equals("CASH VOUCHER", StringComparison.InvariantCultureIgnoreCase) && r.IsSelected)))
        {
            <br />
            <br />
            <div style="text-align:center">
                <h5>
                    The following rewards have been applied
                </h5>
                <br />
                @foreach (var promo in Model)
                {
                    if (!promo.Rewards.Any(r => r.Type.Equals("FREE SKU", StringComparison.InvariantCultureIgnoreCase) && r.IsSelected) &&
                         !promo.Rewards.Any(r => r.Type.Equals("CASH VOUCHER", StringComparison.InvariantCultureIgnoreCase) && r.IsSelected))
                        continue;

                    <h6>
                        Rule @promo.RuleId
                        @foreach (var r in promo.Rewards.Where(r => r.Type.Equals("FREE SKU", StringComparison.InvariantCultureIgnoreCase) && r.IsSelected))
                        {
                            <span class="badge bg-info text-light">@r</span>
                        }

                        @foreach (var r in promo.Rewards.Where(r => r.Type.Equals("CASH VOUCHER", StringComparison.InvariantCultureIgnoreCase) && r.IsSelected))
                        {
                            <span class="badge bg-warning text-dark">@r</span>
                        }
                        <br />
                    </h6>
                }

                @{
                    decimal totalCVAmount = Model.SelectMany(x => x.Rewards.Where(r => r.Type.Equals("CASH VOUCHER", StringComparison.InvariantCultureIgnoreCase) && r.IsSelected)).Sum(x => x.CashVoucherAmount);
                    if (totalCVAmount > 0)
                    {
                        <br />
                        <br />
                        <h5>
                            To be shown on the receipt
                        </h5>
                        <br />
                        <div class="receipt">
                            <table style="width: 100%">
                                <tr>
                                    <td style="text-align: left">
                                        ...
                                    </td>
                                    <td>
                                    </td>
                                </tr>
                                <tr>
                                    <td style="text-align: left">
                                        Total product Vouchers
                                    </td>
                                    <td style="text-align: right">
                                        <b>-@totalCVAmount.ToString("C2")</b>
                                    </td>
                                </tr>
                                <tr>
                                    <td style="text-align: left">
                                        ...
                                    </td>
                                    <td>
                                    </td>
                                </tr>
                            </table>
                            @*<button type="button" class="btn btn-warning" style="background-color: #fcc578 !important; color: white; width: 80%">PROCEED</button>*@
                            @Html.ActionLink("PROCEED", "Submit", "Home", new { uid = Model.First().TestId }, new { @class = "btn btn-warning", @style = "background-color: #fcc578 !important; color: white; width: 80%" })
                        </div>
                    }
                }
            </div>
        }
    }
}
